/* Heyo fellas, till now we have seen that we take input from the user and do some computations based on it. What if we need to simulate unpredictable events, or perform tasks like simulations? In these type of cases, random numbers are essential. Also, not waiting for the user to input values, allows the program to function autonomously. 

So, this question will introduce you to the random library in C++. One can generate a pseudo-random number between 0 and RAND_MAX (largest value that can be represented using signed int) using rand(). A pseudo-random number is generated by a deterministic algorithm (produces the same result) that just simulates randomness. Its fine if these terms do not make much sense. You will understand it when we look at the program.

In this question, you are required to simulate coin tosses and output the number of heads and tails that are seen.

Reference: https://cplusplus.com/reference/cstdlib/rand/ 

Following code snippet is given to you for use:

#include <simplecpp>

int main() {

    int N;

    cin >> N;

    rand() % 2; // Generates a integer number in range 0 to 1

}

Use this helper code to generate coin tosses. The helper code takes an integer N, as input from the user that denotes the number of tosses. Your task is to perform N coin tosses, and print the number of heads and tails that you got.



Example 1:

N = 2

Output:

H: 1, T: 1

Example 2:

N = 6

Output:

H: 1, T: 5



Run your code for values of N: 10, 100, 1000. Also, run your code for the same value of N multiple times and observe the result. Does it always produce the same output?

Try including #include<time.h> before main_program and srand(time(NULL)); at the beginning of the program in the main. Now execute your code for the same value of N multiple times. What difference do you see?

srand initializes the random number generator with a seed based on the current time. This allows rand() to produce a different sequence of random numbers each time a program runs. 

Reference: https://cplusplus.com/reference/cstdlib/srand/ 



Input Format:
An integer N (1 <= N <= 1e6) representing the number of rolls.


Output Format:
Print H: <number of heads>, T: <number of tails>, in this exact format
Example: H: 3, T: 5
Assumptions on input :

Assume that the value of N entered by the user is between 1 and 1e6


Note:
Do not write any C++ statements for printing general messages. For example, the following should NOT be present in your program:
cout << "Enter a number:",  
cout << "The computed answer is", etc.
cout should be used to print only the computed final output. In addition, do not print unnecessary spaces unless specified in the program.
If any hard coding is found, or if any test case passes by merely writing a cout statement and without any logic, then the marks for that test case will NOT be awarded.




*/

#include <simplecpp>

int rand_0_to_1(){
    return rand()%2;
}


int main() {

    int N;

    cin >> N;
    int no_of_tails = 0;
    int no_of_heads  = 0;

    while (N!=0){
        int rand = rand_0_to_1();
        if (rand==0){
            ++ no_of_heads ;
        }
        else{
            ++no_of_tails;
        }

        N--;
    }
std::cout << "H: " << no_of_heads <<", " << "T: " << no_of_tails;

}


